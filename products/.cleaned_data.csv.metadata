{"timestamp": 1688028062.484694, "stored_source_code": "This file is for cleaning the data\nimport numpy as np\nimport pandas as pd\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem\nfrom rdkit.Chem import PandasTools\nupstream = None\nproduct = None\n# Read in the data from a specified csv file in the folder\n# paths are relative to pipeline.yaml\ndata = pd.read_csv(\"data/chembl33_combined_init.csv\", index_col=0)\n# Check for SMILES, Protein and Class columns (all must be present)\nif \"SMILES\" not in data.columns:\n    raise ValueError(\"SMILES column not found\")\nif \"Protein\" not in data.columns:\n    raise ValueError(\"Protein column not found\")\nif \"Class\" not in data.columns:\n    raise ValueError(\"Class column not found\")\n# Make Canon_SMILES column, then remove duplicates (prioritising ChEMBL entries)\ncanon_smiles = [Chem.CanonSmiles(s, useChiral=1) for s in data[\"SMILES\"]]\ndata[\"Canon_SMILES\"] = canon_smiles\ndata = data.drop_duplicates(subset=[\"Protein\", \"Canon_SMILES\"], keep=\"first\")\n# Sort data in the desired order (requires conversion of strings to uppercase first)\ndata[\"Type\"] = data[\"Type\"].str.upper()\ndata.sort_values(by=[\"Protein\",\"Class\",\"Type\"], ascending=[True,False,False])\n# Do data preparation and checks (based on https://github.com/vfscalfani/CSN_tutorial)\n# First check for disconnected SMILES via string matching\ndata_2 = data[~data[\"Canon_SMILES\"].str.contains(\"\\.\")].copy()\n\n# Then double check for disconnected fragments and remove disconnected fragments\nnum_frags = []\nfor smi in data_2[\"Canon_SMILES\"]:\n    mol = Chem.MolFromSmiles(smi, sanitize=True)\n    num_frags.append(len(Chem.GetMolFrags(mol)))\n\ndata_2[\"num_frags\"] = num_frags\ndata_2 = data_2[data_2[\"num_frags\"] == 1]\n# drop the num_frags column\ndata_2 = data_2.drop(columns=[\"num_frags\"])\n# Remove bromodomains with fewer than 50 entries\nfew_points = (data_2[\"Protein\"].value_counts() < 50) # boolean\nfew_points_idx = few_points[few_points].index\n\ndata_2 = data_2.loc[~data_2[\"Protein\"].isin(few_points_idx)]\n\nprint(data_2.shape)\nprint(data_2[\"Canon_SMILES\"].describe())\nprint(data_2[\"Protein\"].describe())\n# Add Murcko SMILES column with PandasTools\nPandasTools.AddMoleculeColumnToFrame(data_2, \"Canon_SMILES\", \"Mol\")\nPandasTools.AddMurckoToFrame(data_2, molCol=\"Mol\", MurckoCol=\"Murcko_SMILES\")\n\n# replace empty strings in murcko smiles col with nan, then assign to NoMurcko\ndata_2[\"Murcko_SMILES\"] = data_2[\"Murcko_SMILES\"].replace(\"\", np.nan)\ndata_2[\"Murcko_SMILES\"] = data_2[\"Murcko_SMILES\"].fillna(\"NoMurcko\")\ndata_2.drop(columns=[\"Mol\"], inplace=True)\n# Save the cleaned data to a csv file (this is prior to removing fingerprint duplicates)\ndata_2.to_csv(str(product[\"data\"]))", "params": {}}